rstd <- resid(fit)/sigma*sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd,rstandard(fit)))
plot(fit,which=3)
plot(fit,which=2)
sigma1 <- sqrt(devian(fitno)-fitno$df.residual)
sigma1 <- sqrt(deviance(fitno)-fitno$df.residual)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
sqrt(1-hatvalues(fit)[1])resid(fit)[1] / sigma1*
resid(fit)[1] / sigma *sqrt(1-hatvalues(fit)[1])
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno,out2) -predict(fit,out2)
sum(dy^2)/2*sigma^2
sum(dy^2)/(2*sigma^2)
plot(fit,which=5)
0
library(datasets)
pairs(mtcars)
testt <- t.test(mpg~vs,data=mtcars)
testt
cor(mtcars$disp,mtcars$hp)
source('~/.active-rstudio-document', echo=TRUE)
summary(fitall)
par(mfrow=c(2, 2))
plot(fit8)
summary(fit8)
summary(fit5)
summary(fit8)
library(datasets)
?mtcars
view(mtcars)
View(mtcars)
library(swirl)
swirl()
rpg1()
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility~.,data=swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ .-Examination,data=swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility~Agriculture,data=swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, data=swiss)
anova(fit1,fit3)
deviance(fit3)
d <- deviance(fit3/43)
d <- deviance(fit3)/43
n <- (deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d,2,43,lower.tail = FALSE)
shapiro.test(fit3$residuals)
anova(fit1,fit3,fit5,fit6)
0
library(swirl)
swirl()
View(ravenData)
mdl <- glm( ravenWinNum ~ ravenScore , family = "binomial" , data = ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95,1)
var(rpois(1000, 50))
nxt()
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,0]
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
View(hits)
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
0
library(mass)
?shuttle
?MASS
library(MASS)
?shuttle
mdl <- glm(use~wind, family = "binomial", data=shuttle)
summary(mdl)
coef(mdl)[1]/coef(mdl)[2]
odds <- exp(summary(fit)$coef)
odds[1] / odds[2] # 0.9686888
odds <- exp(summary(mdl)$coef)
odds[1] / odds[2] # 0.9686888
dat <- shuttle
dat$use <- as.numeric(dat$use == "auto")
fit <- glm(usse ~ as.factor(wind), data=shuttle, family="binomial")
odds <- exp(summary(fit)$coef)
odds[1] / odds[2] # 0.9686888
dat$use <- as.numeric(dat$use == "auto")
fit <- glm(use ~ as.factor(wind), data=dat, family="binomial")
odds <- exp(summary(fit)$coef)
odds[1] / odds[2] # 0.9686888
head(data)
head(dat)
summary(fit)
library(MASS)
dat<- shuttle
dat$use <- as.numeric(dat$use=="auto")
head(dat)
mdl <- glm( use ~ wind, family="binomial", data=dat)
summary(mdl)
odds <- exp(coef(mdl))
odds[1]/odds[2]
1/odds
odds[2]/odds[1]
dat$wind <- as.numeric(dat$wind=="head")
mdl <- glm( use ~ wind, family="binomial", data=dat)
sumamry(mdl)
summary(mdl)
exp(coef(mdl))
mdl2 <- glm( use ~ wind + as.factor(magn), family="binomial", data=dat)
summary(mdl2)
exp(coef(mdl2))
?InsectSprays
dat <- InsectSprays
head(InsectSprays)
mdl <- glm( count ~ as.factor(spray), family="poisson", data=dat)
summary(mdl)
mdl <- glm( count ~ as.factor(spray) -1, family="poisson", data=dat)
summary(mdl)
exp(coef(mdl))
mdl <- glm( count ~ as.factor(spray), family="poisson", data=dat)
exp(coef(mdl))
fit <- glm(count ~ as.factor(spray) + offset(log(count+1)),
family="poisson", data=InsectSprays)
fit2 <- glm(count ~ as.factor(spray) + offset(log(10)+log(count+1)),
family="poisson", data=InsectSprays)
summary(fit)$coef
summary(fit2)$coef
# Problem 6.
x <- -5 : 5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54,
3.87, 4.97)
knotPoint <- c(0)
spline <- sapply(knotPoint, function(knot) (x > knot) * (x - knot))
xMatrix <- cbind(1, x, spline)
fit <- lm(y ~ xMatrix - 1)
yhat <- predict(fit)
yhat
slope <- fit$coef[2] + fit$coef[3]
slope # 1.013
plot(x, y)
lines(x, yhat, col=2)
xMatrix
summary(fit)
xMatrixx
names(xMatrix)
View(xMatrix)
names(xMatrix) <- c("ones","xvals","spline")
View(xMatrix)
?"names"
View(xMatrix)
colnames(xMatrix) <- c("ones","xvals","spline")
View(xMatrix)
fit <- lm(y ~ xMatrix - 1)
summary(fit)
install.packages("caret")
install.packages(c("base64enc", "class", "curl", "devtools", "dplyr", "evaluate", "formatR", "git2r", "highr", "httpuv", "jsonlite", "knitr", "maps", "MASS", "mgcv", "mime", "nlme", "nnet", "PKI", "quantmod", "quantreg", "R6", "Rcpp", "rJava", "rmarkdown", "scales", "spatial", "tidyr", "xml2"))
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
require(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
head(predictors)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
View(adData)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
View(adData)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
?alzheimer
??alzheimer
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
log(0)
head(training$Superplasticizer)
hist(log(training$Superplasticizer+1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(predictors)
startil <- grep("IL",names(predictors))
startil <- grep("IL",names(predictors),value=T)
startil
startil <- grep("^IL",names(predictors),value=T)
startil <- grep("^IL",names(predictors),value=T)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
startil <- grep("^IL",names(predictors),value=T)
ss <- training[,grep('^IL', names(predictors) )]
preProc <- preProcess(ss, method='pca', thresh=0.8,
outcome=training$diagnosis)
preProc$rotation # 9
grep('^IL', names(predictors) )
grep('^IL', names(predictors) ,value=T)
ss <- training[,grep("^IL", names(predictors) )]
preProc <- preProcess(ss, method='pca', thresh=0.8,
outcome=training$diagnosis)
preProc$rotation # 9
View(ss)
View(training)
ss <- training[,grep("^IL", names(training) )]
preProc <- preProcess(ss, method='pca', thresh=0.8,
outcome=training$diagnosis)
preProc$rotation # 9
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
startil <- grep("^IL",names(training))
head(training)
startil <- c(1,startil)
newtrain <- training[,startil]
head(newtrain)
newtest <- testing[,startil]
model1 <- train(diagnosis~., method="glm", data=newtrain)
install.packages('e1071', dependencies=TRUE)
model1 <- train(diagnosis~., method="glm", data=newtrain)
predict1 <- predict(model1,newdata = newtest)
??confusionMatrix
conf1 <- confusionMatrix(predict1,newtest$diagnosis)
conf1
model2 <- train(diagnosis~.,method="glm",preProcess="pca", data=newtrain, trControl=trainControl(preProcOptions = list(thresh=0.8)))
predict2 <- predict(model2,newdata = newtest)
conf2 <- confusionMatrix(predict2,newtest$diagnosis)
conf2
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
intrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=F)
training <- segmentationOriginal[intrain,]
testing <- segmentationOriginal[-intrain,]
dim(training)
dim(testing)
modfit <- train(Case ~ . ,method="rpart",data=training)
modfit
plot(modfit)
plot(modfit$finalModel)
plot(modfit$finalModel,uniform=T)
text(modfit$finalModel, cex=0.8)
set.seed(125)
intrain <- segmentationOriginal$Case == "Train"
training <- segmentationOriginal[intrain,]
testing <- segmentationOriginal[!intrain,]
modfit <- train(Case ~ . ,method="rpart",data=training
)
View(testing)
modfit <- train(Class ~ . ,method="rpart",data=training
)
plot(modfit$finalModel,uniform=T)
text(modfit$finalModel, cex=0.8)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
modelfit <- train(Area ~ ., method="tree", data=olive)
modelfit <- train(Area ~ ., method="rpart", data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modelfit$finalModel,newdata)
head(olive)
table(olive$Area)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
names(trainSA)
modelfit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl)
modelfit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, method="glm",family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predicttrain <- predict(modelfit,trainSA)
predicttest <- predict(modelfit,testSA)
missclass(trainSA$chd,predicttrain)
missClass(trainSA$chd,predicttrain)
missClass(testSA$chd,predicttest)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
train <- vowel.train
test <- vowel.test
train$y <- as.factor(train$y)
test$y <- as.factor(test$y)
set.seed(33833)
modelfit <- train(y ~ ., method="rpart", data=train)
?varImp
varImp(modelfit)
modelfit <- train(y ~ ., method="rf", data=train)
varImp(modelfit)
set.seed(33833)
modelfit <- train(y ~ ., method="rf", data=train)
varImp(modelfit)
require(rCharts)
install.packages("rcharts")
install.packages("rCharts")
require(devtools)
install_github('rCharts', 'ramnathv')
## Example 1 Facetted Scatterplot
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
library(rCharts)
## Example 1 Facetted Scatterplot
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
install.packages("googleVis")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(rCharts)
library(airquality)
data("airquality")
dTable(airquality, sPaginationType = "full_numbers")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
# data source
# http://www.hscic.gov.uk/catalogue/PUB16988/Obes-phys-acti-diet-eng-2015-tab.csv
# retrieved 17/11/2015
# info
# https://data.gov.uk/dataset/statistics_on_obesity_physical_activity_and_diet_england
setwd("r programming/data products/project")
datfile <- "data/Obes-phys-acti-diet-eng-2015-tab.csv"
data <- read.csv(datfile, header = FALSE, stringsAsFactors = F )
# format is horrendous, will need to strip out relevant data tables
#7.1
yeartotals <- data[34:44, c(1,3:6)]
colnames(yeartotals) <- data[32,c(1,3:6)]
yeartotals[,1] <- gsub("[5]","",yeartotals[,1],fixed=T)
yeartotals[,1] <- gsub("[6]","",yeartotals[,1],fixed=T)
#7.2
totalsbyage <- data[66:76, c(1,3:12)]
colnames(totalsbyage) <- data[64, c(1,3:12)]
totalsbyage[,1] <- gsub("[5]","",totalsbyage[,1],fixed=T)
totalsbyage[,1] <- gsub("[6]","",totalsbyage[,1],fixed=T)
#7.5
secyeartotals <- data[593:603,c(1,3:6)]
colnames(secyeartotals) <- data[591,c(1,3:6)]
secyeartotals[,1] <- gsub("[5]","",secyeartotals[,1],fixed=T)
secyeartotals[,1] <- gsub("[6]","",secyeartotals[,1],fixed=T)
#7.6
sectotalsbyage <- data[625:635,c(1,3:12)]
colnames(sectotalsbyage) <- data[623,c(1,3:12)]
sectotalsbyage[,1] <- gsub("[5]","",sectotalsbyage[,1],fixed=T)
sectotalsbyage[,1] <- gsub("[6]","",sectotalsbyage[,1],fixed=T)
#7.9
surgerytotals <- data[1152:1162,3:7]
colnames(surgerytotals) <- data[1150,3:7]
surgerytotals[,1] <- gsub("[6]","",surgerytotals[,1],fixed=T)
surgerytotals[,1] <- gsub("[8]","",surgerytotals[,1],fixed=T)
surgerytotals[,1] <- gsub("[9]","",surgerytotals[,1],fixed=T)
surgerytotals[,1] <- gsub(",","",surgerytotals[,1],fixed=T)
#7.10
surgerybyage <- data[1190:1200, 3:13]
colnames(surgerybyage) <- data[1188,3:13]
surgerybyage[,1] <- gsub("[6]","",surgerybyage[,1],fixed=T)
surgerybyage[,1] <- gsub("[9]","",surgerybyage[,1],fixed=T)
surgerybyage[,1] <- gsub("[10]","",surgerybyage[,1],fixed=T)
surgerybyage[,1] <- gsub(",","",surgerybyage[,1],fixed=T)
# location data would be cool at a later date
library(shiny)
app()
shinyApp()
shinyApp()
shinyApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(secyeartotals)
View(yeartotals)
yeartotals[,2:5] <- as.numeric(yeartotals[,2:5])
yeartotals[,2:5]
as.numeric(yeartotals[,2:5])
yeartotals[,2:5] <- saply(yeartotals[,2:5],as.numeric)
yeartotals[,2:5] <- sapply(yeartotals[,2:5],as.numeric)
View(yeartotals)
shiny::runApp()
totalsbyage[,2:11] <- sapply(totalsbyage[,2:11],as.numeric
)
secyeartotals[,2:5] <- sapply(secyeartotals[,2:5],as.numeric)
sectotalsbyage[,2:11] <- sapply(sectotalsbyage[,2:11],as.numeric)
surgerytotals[,2:5] <- sapply(surgerytotals[,2:5],as.numeric)
surgerybyage[,2:11] <- sapply(surgerybyage[,2:11],as.numeric)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(ggplot2)
qplot(yeartotals)
ggplot(yeartotals, aes(x=Year, y=value)) + geom_line()
ggplot(yeartotals, aes(x=Year) + geom_line()
)
ggplot(yeartotals, aes(x=Year)) + geom_line()
plot3 <- ggplot(data=graph3data, aes(x=year) + geom_line()
)
a <- array(c(1:23, NA), c(2,3,4))
melt(a)
library(reshape2)
melt(a)
View(yeartotals)
